# HG changeset patch
# User Ted Mielczarek <ted.mielczarek@gmail.com>
# Date 1272373066 14400
# Node ID 620e28beb176e09c5a11fcbcd914aedacdfa4487
# Parent  0ba27d89b2088b74106a82c97cd36f08ce26d9d5
imported patch xre-uikit
* * *
imported patch xre-oops

diff --git a/toolkit/xre/Makefile.in b/toolkit/xre/Makefile.in
--- a/toolkit/xre/Makefile.in
+++ b/toolkit/xre/Makefile.in
@@ -120,12 +120,16 @@
 endif
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
-CMMSRCS += MacLaunchHelper.mm
-CMMSRCS += MacApplicationDelegate.mm
+CMMSRCS += \
+  MacLaunchHelper.mm \
+  MacApplicationDelegate.mm \
+  $(NULL)
+ifneq (,$(filter cocoa uikit,$(MOZ_WIDGET_TOOLKIT)))
 CMMSRCS += MacAutoreleasePool.mm
 CPPSRCS += nsCommandLineServiceMac.cpp
 OS_CXXFLAGS += -fexceptions
 endif
+endif
 
 ifdef MOZ_X11
 CPPSRCS += nsX11ErrorHandler.cpp
diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -68,7 +68,7 @@
 #include "nsAppRunner.h"
 #include "nsUpdateDriver.h"
 
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
 #include "MacLaunchHelper.h"
 #include "MacApplicationDelegate.h"
 #include "MacAutoreleasePool.h"
@@ -181,7 +181,7 @@
 #include "nsThreadUtils.h"
 #endif
 
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
 #include "nsILocalFileMac.h"
 #include "nsCommandLineServiceMac.h"
 #endif
@@ -200,10 +200,14 @@
 #include <malloc.h>
 #endif
 
-#if defined (XP_MACOSX)
+#if defined (MOZ_WIDGET_COCOA)
 #include <Carbon/Carbon.h>
 #endif
 
+#if defined (MOZ_WIDGET_UIKIT)
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 #ifdef DEBUG
 #include "prlog.h"
 #endif
@@ -1098,7 +1102,7 @@
   NS_IF_RELEASE(gNativeAppSupport);
 
   if (mServiceManager) {
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
     // On OS X, we need a pool to catch cocoa objects that are autoreleased
     // during teardown.
     mozilla::MacAutoreleasePool pool;
@@ -1516,27 +1520,45 @@
     return NS_NewNativeLocalFile(nsDependentCString(gBinaryPath), PR_FALSE,
                                  aResult);
 
-  NS_NewNativeLocalFile(EmptyCString(), PR_TRUE, getter_AddRefs(lf));
-  nsCOMPtr<nsILocalFileMac> lfm (do_QueryInterface(lf));
-  if (!lfm)
-    return NS_ERROR_FAILURE;
-
   // Works even if we're not bundled.
   CFBundleRef appBundle = CFBundleGetMainBundle();
   if (!appBundle)
     return NS_ERROR_FAILURE;
 
   CFURLRef executableURL = CFBundleCopyExecutableURL(appBundle);
-  if (!executableURL)
+  if (!executableURL)    
     return NS_ERROR_FAILURE;
+#ifdef MOZ_WIDGET_COCOA
+  NS_NewNativeLocalFile(EmptyCString(), PR_TRUE, getter_AddRefs(lf));
+  nsCOMPtr<nsILocalFileMac> lfm (do_QueryInterface(lf));
+  if (!lfm) {
+    CFRelease(executableURL);
+    return NS_ERROR_FAILURE;
+  }
   rv = lfm->InitWithCFURL(executableURL);
-  CFRelease(executableURL);
+  
   if (NS_FAILED(rv))
     return rv;
 
   // Callers expect a normalized path.
   lfm->Normalize();
 
+#else // MOZ_WIDGET_UIKIT
+  char path[MAXPATHLEN * 4];
+  if (!CFURLGetFileSystemRepresentation(executableURL, true, (UInt8*)path,
+                                        sizeof(path))) {
+    CFRelease(executableURL);
+    return NS_ERROR_FAILURE;
+  }
+  rv = NS_NewNativeLocalFile(nsDependentCString(path), PR_TRUE,
+                             getter_AddRefs(lf));
+
+  if (NS_FAILED(rv))
+    return rv;
+                           
+#endif
+  CFRelease(executableURL);
+  
 #elif defined(XP_UNIX)
   struct stat fileStat;
   char exePath[MAXPATHLEN];
@@ -1755,7 +1777,7 @@
 #if defined(ANDROID)
   mozilla::AndroidBridge::Bridge()->ScheduleRestart();
 #else
-#if defined(XP_MACOSX)
+#if defined(MOZ_WIDGET_COCOA)
   CommandLineServiceMac::SetupMacCommandLine(gRestartArgc, gRestartArgv, PR_TRUE);
   LaunchChildMac(gRestartArgc, gRestartArgv);
 #else
@@ -1957,7 +1979,7 @@
     rv = xpcom.SetWindowCreator(aNative);
     NS_ENSURE_SUCCESS(rv, NS_ERROR_FAILURE);
 
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
     CommandLineServiceMac::SetupMacCommandLine(gRestartArgc, gRestartArgv, PR_TRUE);
 #endif
 
@@ -2044,7 +2066,7 @@
     ScopedXPCOMStartup xpcom;
     rv = xpcom.Initialize();
     if (NS_SUCCEEDED(rv)) {
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
       CommandLineServiceMac::SetupMacCommandLine(gRestartArgc, gRestartArgv, PR_TRUE);
 #endif
 
@@ -2985,7 +3007,7 @@
   }
 #endif
 
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
   if (PR_GetEnv("MOZ_LAUNCHED_CHILD")) {
     // This is needed, on relaunch, to force the OS to use the "Cocoa Dock
     // API".  Otherwise the call to ReceiveNextEvent() below will make it
@@ -3049,7 +3071,7 @@
     gSafeMode = PR_TRUE;
   }
 
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
   if (GetCurrentEventKeyModifiers() & optionKey)
     gSafeMode = PR_TRUE;
 #endif
@@ -3598,7 +3620,7 @@
           }
 #endif
 
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
           // we re-initialize the command-line service and do appleevents munging
           // after we are sure that we're not restarting
           cmdLine = do_CreateInstance("@mozilla.org/toolkit/command-line;1");
diff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp
--- a/toolkit/xre/nsXREDirProvider.cpp
+++ b/toolkit/xre/nsXREDirProvider.cpp
@@ -78,7 +78,7 @@
 #define CSIDL_LOCAL_APPDATA             0x001C
 #endif
 #endif
-#ifdef XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
 #include "nsILocalFileMac.h"
 #endif
 #ifdef XP_BEOS
@@ -1012,7 +1012,7 @@
   nsresult rv;
   nsCOMPtr<nsILocalFile> localDir;
 
-#if defined(XP_MACOSX)
+#if defined(MOZ_WIDGET_COCOA)
   FSRef fsRef;
   OSType folderType;
   if (aLocal) {
@@ -1139,7 +1139,7 @@
 {
   nsresult rv;
   nsCOMPtr<nsILocalFile> localDir;
-#if defined(XP_MACOSX)
+#if defined(MOZ_WIDGET_COCOA)
   FSRef fsRef;
   OSErr err = ::FSFindFolder(kOnSystemDisk, kApplicationSupportFolderType, kCreateFolder, &fsRef);
   NS_ENSURE_FALSE(err, NS_ERROR_FAILURE);
