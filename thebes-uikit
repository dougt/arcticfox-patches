# HG changeset patch
# User Ted Mielczarek <ted.mielczarek@gmail.com>
# Date 1272373064 14400
# Node ID b724ab653e62fadfb0c811989326887f205c1c1f
# Parent  1d7327fd21ca54bedbd6b276d68188aedb486bd9
imported patch thebes-uikit-tweaks
* * *
imported patch thebes-extra

diff --git a/gfx/src/thebes/Makefile.in b/gfx/src/thebes/Makefile.in
--- a/gfx/src/thebes/Makefile.in
+++ b/gfx/src/thebes/Makefile.in
@@ -99,6 +99,10 @@
 CMMSRCS		= nsSystemFontsMac.mm
 endif
 
+ifeq ($(MOZ_WIDGET_TOOLKIT),uikit)
+CMMSRCS		= nsSystemFontsUIKit.mm
+endif
+
 EXPORTS         += nsIThebesFontMetrics.h
 
 LOCAL_INCLUDES	= \
diff --git a/gfx/src/thebes/nsSystemFontsMac.h b/gfx/src/thebes/nsSystemFontsUIKit.h
copy from gfx/src/thebes/nsSystemFontsMac.h
copy to gfx/src/thebes/nsSystemFontsUIKit.h
--- a/gfx/src/thebes/nsSystemFontsMac.h
+++ b/gfx/src/thebes/nsSystemFontsUIKit.h
@@ -35,18 +35,18 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
-#ifndef _NS_SYSTEMFONTSMAC_H_
-#define _NS_SYSTEMFONTSMAC_H_
+#ifndef _NS_SYSTEMFONTSUIKIT_H_
+#define _NS_SYSTEMFONTSUIKIT_H_
 
 #include <gfxFont.h>
 #include <nsIDeviceContext.h>
 
-class nsSystemFontsMac
+class nsSystemFontsUIKit
 {
 public:
-    nsSystemFontsMac();
+    nsSystemFontsUIKit();
     nsresult GetSystemFont(nsSystemFontID anID, nsString *aFontName,
                            gfxFontStyle *aFontStyle) const;
 };
 
-#endif /* _NS_SYSTEMFONTSMAC_H_ */
+#endif /* _NS_SYSTEMFONTSUIKIT_H_ */
diff --git a/gfx/src/thebes/nsSystemFontsMac.mm b/gfx/src/thebes/nsSystemFontsUIKit.mm
copy from gfx/src/thebes/nsSystemFontsMac.mm
copy to gfx/src/thebes/nsSystemFontsUIKit.mm
--- a/gfx/src/thebes/nsSystemFontsMac.mm
+++ b/gfx/src/thebes/nsSystemFontsUIKit.mm
@@ -36,12 +36,13 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
-#include <Cocoa/Cocoa.h>
+#import <UIKit/UIFont.h>
+#import <UIKit/UIInterface.h>
 
-#include "nsSystemFontsMac.h"
+#include "nsSystemFontsUIKit.h"
 
 
-nsSystemFontsMac::nsSystemFontsMac()
+nsSystemFontsUIKit::nsSystemFontsUIKit()
 {
 }
 
@@ -53,7 +54,7 @@
 }
 
 nsresult
-nsSystemFontsMac::GetSystemFont(nsSystemFontID aID, nsString *aFontName,
+nsSystemFontsUIKit::GetSystemFont(nsSystemFontID aID, nsString *aFontName,
                                 gfxFontStyle *aFontStyle) const
 {
     // hack for now
@@ -71,77 +72,60 @@
         return NS_OK;
     }
 
-/* possibilities, see NSFont Class Reference:
-    [NSFont boldSystemFontOfSize:     0.0]
-    [NSFont controlContentFontOfSize: 0.0]
-    [NSFont labelFontOfSize:          0.0]
-    [NSFont menuBarFontOfSize:        0.0]
-    [NSFont menuFontOfSize:           0.0]
-    [NSFont messageFontOfSize:        0.0]
-    [NSFont paletteFontOfSize:        0.0]
-    [NSFont systemFontOfSize:         0.0]
-    [NSFont titleBarFontOfSize:       0.0]
-    [NSFont toolTipsFontOfSize:       0.0]
-    [NSFont userFixedPitchFontOfSize: 0.0]
-    [NSFont userFontOfSize:           0.0]
-    [NSFont systemFontOfSize:         [NSFont smallSystemFontSize]]
-    [NSFont boldSystemFontOfSize:     [NSFont smallSystemFontSize]]
-*/
-
-    NSFont *font = nsnull;
+    UIFont *font = nsnull;
     switch (aID) {
         // css2
         case eSystemFont_Caption:
-            font = [NSFont systemFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_Icon: // used in urlbar; tried labelFont, but too small
-            font = [NSFont controlContentFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_Menu:
-            font = [NSFont systemFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_MessageBox:
-            font = [NSFont systemFontOfSize:[NSFont smallSystemFontSize]];
+            font = [UIFont systemFontOfSize:[UIFont smallSystemFontSize]];
             break;
         case eSystemFont_SmallCaption:
-            font = [NSFont boldSystemFontOfSize:[NSFont smallSystemFontSize]];
+            font = [UIFont boldSystemFontOfSize:[UIFont smallSystemFontSize]];
             break;
         case eSystemFont_StatusBar:
-            font = [NSFont systemFontOfSize:[NSFont smallSystemFontSize]];
+            font = [UIFont systemFontOfSize:[UIFont smallSystemFontSize]];
             break;
         // css3
         //case eSystemFont_Window:     = 'sans-serif'
         //case eSystemFont_Document:   = 'sans-serif'
         case eSystemFont_Workspace:
-            font = [NSFont controlContentFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_Desktop:
-            font = [NSFont controlContentFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_Info:
-            font = [NSFont controlContentFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_Dialog:
-            font = [NSFont systemFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_Button:
-            font = [NSFont systemFontOfSize:[NSFont smallSystemFontSize]];
+            font = [UIFont systemFontOfSize:[UIFont buttonFontSize]];
             break;
         case eSystemFont_PullDownMenu:
-            font = [NSFont menuBarFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_List:
-            font = [NSFont systemFontOfSize:[NSFont smallSystemFontSize]];
+            font = [UIFont systemFontOfSize:[UIFont smallSystemFontSize]];
             break;
         case eSystemFont_Field:
-            font = [NSFont systemFontOfSize:[NSFont smallSystemFontSize]];
+            font = [UIFont systemFontOfSize:[UIFont smallSystemFontSize]];
             break;
         // moz
         case eSystemFont_Tooltips:
-            font = [NSFont toolTipsFontOfSize:0.0];
+            font = [UIFont systemFontOfSize:0.0];
             break;
         case eSystemFont_Widget:
-            font = [NSFont systemFontOfSize:[NSFont smallSystemFontSize]];
+            font = [UIFont systemFontOfSize:[UIFont smallSystemFontSize]];
             break;
         default:
             // should never hit this
@@ -152,17 +136,17 @@
 
     GetStringForNSString([font familyName], *aFontName);
     aFontStyle->size = [font pointSize];
-
-    NSFontSymbolicTraits traits = [[font fontDescriptor] symbolicTraits];
-    if (traits & NSFontBoldTrait)
+    /*
+    UIFontSymbolicTraits traits = [[font fontDescriptor] symbolicTraits];
+    if (traits & UIFontBoldTrait)
         aFontStyle->weight = FONT_WEIGHT_BOLD;
-    if (traits & NSFontItalicTrait)
+    if (traits & UIFontItalicTrait)
         aFontStyle->style = FONT_STYLE_ITALIC;
     aFontStyle->stretch =
-        (traits & NSFontExpandedTrait) ?
-            NS_FONT_STRETCH_EXPANDED : (traits & NSFontCondensedTrait) ?
+        (traits & UIFontExpandedTrait) ?
+            NS_FONT_STRETCH_EXPANDED : (traits & UIFontCondensedTrait) ?
                 NS_FONT_STRETCH_CONDENSED : NS_FONT_STRETCH_NORMAL;
-
+    */
     aFontStyle->systemFont = PR_TRUE;
 
     return NS_OK;
diff --git a/gfx/src/thebes/nsThebesDeviceContext.cpp b/gfx/src/thebes/nsThebesDeviceContext.cpp
--- a/gfx/src/thebes/nsThebesDeviceContext.cpp
+++ b/gfx/src/thebes/nsThebesDeviceContext.cpp
@@ -81,10 +81,15 @@
 #include "nsSystemFontsBeOS.h"
 static nsSystemFontsBeOS *gSystemFonts = nsnull;
 #elif XP_MACOSX
+#ifdef MOZ_WIDGET_COCOA
 #include "nsSystemFontsMac.h"
+static nsSystemFontsMac *gSystemFonts = nsnull;
+#else
+#include "nsSystemFontsUIKit.h"
+static nsSystemFontsUIKit *gSystemFonts = nsnull;
+#endif
 #include "gfxQuartzSurface.h"
 #include "gfxImageSurface.h"
-static nsSystemFontsMac *gSystemFonts = nsnull;
 #elif defined(MOZ_WIDGET_QT)
 #include "nsSystemFontsQt.h"
 static nsSystemFontsQt *gSystemFonts = nsnull;
@@ -825,8 +830,10 @@
         gSystemFonts = new nsSystemFontsOS2();
 #elif defined(XP_BEOS)
         gSystemFonts = new nsSystemFontsBeOS();
-#elif XP_MACOSX
+#elif defined(MOZ_WIDGET_COCOA)
         gSystemFonts = new nsSystemFontsMac();
+#elif defined(MOZ_WIDGET_UIKIT)
+        gSystemFonts = new nsSystemFontsUIKit();
 #elif defined(MOZ_WIDGET_QT)
         gSystemFonts = new nsSystemFontsQt();
 #else
diff --git a/gfx/thebes/public/Makefile.in b/gfx/thebes/public/Makefile.in
--- a/gfx/thebes/public/Makefile.in
+++ b/gfx/thebes/public/Makefile.in
@@ -108,7 +108,7 @@
 EXPORTS +=	gfxPDFSurface.h
 endif
 
-ifeq (cocoa,$(MOZ_WIDGET_TOOLKIT))
+ifneq (,$(filter cocoa uikit,$(MOZ_WIDGET_TOOLKIT)))
 EXPORTS +=	gfxPlatformMac.h \
 		gfxQuartzSurface.h \
 		gfxQuartzImageSurface.h \
diff --git a/gfx/thebes/public/gfxFont.h b/gfx/thebes/public/gfxFont.h
--- a/gfx/thebes/public/gfxFont.h
+++ b/gfx/thebes/public/gfxFont.h
@@ -247,6 +247,7 @@
 protected:
     friend class gfxPlatformFontList;
     friend class gfxMacPlatformFontList;
+    friend class gfxUIKitPlatformFontList;
     friend class gfxFcFontEntry;
     friend class gfxFontFamily;
     friend class gfxSingleFaceMacFontFamily;
diff --git a/gfx/thebes/public/gfxQuartzPDFSurface.h b/gfx/thebes/public/gfxQuartzPDFSurface.h
--- a/gfx/thebes/public/gfxQuartzPDFSurface.h
+++ b/gfx/thebes/public/gfxQuartzPDFSurface.h
@@ -41,7 +41,11 @@
 #include "gfxASurface.h"
 #include "gfxContext.h"
 
+#ifdef MOZ_WIDGET_COCOA
 #include <Carbon/Carbon.h>
+#else
+#include <CoreGraphics/CoreGraphics.h>
+#endif
 
 class THEBES_API gfxQuartzPDFSurface : public gfxASurface {
 public:
diff --git a/gfx/thebes/public/gfxQuartzSurface.h b/gfx/thebes/public/gfxQuartzSurface.h
--- a/gfx/thebes/public/gfxQuartzSurface.h
+++ b/gfx/thebes/public/gfxQuartzSurface.h
@@ -42,7 +42,11 @@
 #include "gfxASurface.h"
 #include "gfxImageSurface.h"
 
+#ifdef MOZ_WIDGET_COCOA
 #include <Carbon/Carbon.h>
+#else
+#include <CoreGraphics/CoreGraphics.h>
+#endif
 
 class gfxContext;
 
diff --git a/gfx/thebes/src/Makefile.in b/gfx/thebes/src/Makefile.in
--- a/gfx/thebes/src/Makefile.in
+++ b/gfx/thebes/src/Makefile.in
@@ -174,21 +174,34 @@
 EXTRA_DSO_LDOPTS += $(MOZ_PANGO_LIBS) $(CAIRO_FT_LIBS) -lfontconfig
 endif
 
-ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
+ifneq (,$(filter cocoa uikit,$(MOZ_WIDGET_TOOLKIT)))
 CPPSRCS	+= \
 	gfxQuartzSurface.cpp \
 	gfxQuartzImageSurface.cpp \
 	gfxQuartzPDFSurface.cpp \
 	gfxPlatformMac.cpp \
-	gfxMacFont.cpp \
 	gfxCoreTextShaper.cpp \
 	$(NULL)
+
+ifeq (cocoa,$(MOZ_WIDGET_TOOLKIT))
+CPPSRCS += \
+	gfxMacFont.cpp \
+	$(NULL)
+
+CMMSRCS = gfxMacPlatformFontList.mm
+endif
+
+ifeq (uikit,$(MOZ_WIDGET_TOOLKIT))
+CMMSRCS = \
+  gfxUIKitPlatformFontList.mm \
+  gfxUIKitFont.mm \
+  $(NULL)
+endif
+
 #CPPSRCS +=	gfxPDFSurface.cpp
 CPPSRCS +=      nsUnicodeRange.cpp
 CPPSRCS +=      gfxQuartzNativeDrawing.cpp
 
-CMMSRCS = gfxMacPlatformFontList.mm
-
 # Always link with OpenGL/AGL
 EXTRA_DSO_LDOPTS += -framework OpenGL -framework AGL -framework QuickTime -framework AppKit
 endif
diff --git a/gfx/thebes/src/gfxCoreTextShaper.cpp b/gfx/thebes/src/gfxCoreTextShaper.cpp
--- a/gfx/thebes/src/gfxCoreTextShaper.cpp
+++ b/gfx/thebes/src/gfxCoreTextShaper.cpp
@@ -51,13 +51,21 @@
 #include "gfxPlatform.h"
 #include "gfxPlatformMac.h"
 #include "gfxCoreTextShaper.h"
+#ifdef MOZ_WIDGET_COCOA
 #include "gfxMacFont.h"
+#else
+#include "gfxUIKitFont.h"
+#endif
 
 #include "gfxFontTest.h"
 #include "gfxFontUtils.h"
 
 #include "gfxQuartzSurface.h"
+#ifdef MOZ_WIDGET_COCOA
 #include "gfxMacPlatformFontList.h"
+#else
+#include "gfxUIKitPlatformFontList.h"
+#endif
 #include "gfxUserFontSet.h"
 
 #include "nsUnicodeRange.h"
@@ -74,14 +82,20 @@
 CTFontDescriptorRef gfxCoreTextShaper::sDefaultFeaturesDescriptor = NULL;
 CTFontDescriptorRef gfxCoreTextShaper::sDisableLigaturesDescriptor = NULL;
 
-gfxCoreTextShaper::gfxCoreTextShaper(gfxMacFont *aFont)
+gfxCoreTextShaper::gfxCoreTextShaper(gfxCTFont *aFont)
     : gfxFontShaper(aFont)
 {
     // Create our CTFontRef
+#ifdef MOZ_WIDGET_COCOA
     mCTFont = ::CTFontCreateWithPlatformFont(aFont->GetATSFontRef(),
                                              aFont->GetAdjustedSize(),
                                              NULL,
                                              GetDefaultFeaturesDescriptor());
+#else
+    mCTFont = ::CTFontCreateWithName(aFont->GetPostscriptName(),
+                                     aFont->GetAdjustedSize(),
+                                     NULL);
+#endif
 
     // Set up the default attribute dictionary that we will need each time we create a CFAttributedString
     mAttributesDict = ::CFDictionaryCreate(kCFAllocatorDefault,
@@ -164,10 +178,11 @@
     }
 
     CFDictionaryRef attrObj;
+#ifdef MOZ_WIDGET_COCOA
     if (disableLigatures) {
         // For letterspacing (or maybe other situations) we need to make a copy of the CTFont
         // with the ligature feature disabled
-        gfxMacFont *font = static_cast<gfxMacFont*>(mFont);
+        gfxCTFont *font = static_cast<gfxCTFont*>(mFont);
         CTFontRef ctFont =
             CreateCTFontWithDisabledLigatures(font->GetATSFontRef(),
                                               ::CTFontGetSize(mCTFont));
@@ -182,9 +197,12 @@
         // Having created the dict, we're finished with our ligature-disabled CTFontRef
         ::CFRelease(ctFont);
     } else {
+#endif
         attrObj = mAttributesDict;
         ::CFRetain(attrObj);
+#ifdef MOZ_WIDGET_COCOA
     }
+#endif
 
     // Now we can create an attributed string
     CFAttributedStringRef attrStringObj =
@@ -532,6 +550,7 @@
 void
 gfxCoreTextShaper::CreateDefaultFeaturesDescriptor()
 {
+#ifdef MOZ_WIDGET_COCOA
     if (sDefaultFeaturesDescriptor != NULL) {
         return;
     }
@@ -599,8 +618,10 @@
     sDefaultFeaturesDescriptor =
         ::CTFontDescriptorCreateWithAttributes(attributesDict);
     ::CFRelease(attributesDict);
+#endif
 }
 
+#ifdef MOZ_WIDGET_COCOA
 // Create a CTFontRef, with the Common Ligatures feature disabled [static]
 CTFontRef
 gfxCoreTextShaper::CreateCTFontWithDisabledLigatures(ATSFontRef aFontRef, CGFloat aSize)
@@ -655,6 +676,7 @@
     
     return ::CTFontCreateWithPlatformFont(aFontRef, aSize, NULL, sDisableLigaturesDescriptor);
 }
+#endif
 
 void
 gfxCoreTextShaper::Shutdown() // [static]
diff --git a/gfx/thebes/src/gfxCoreTextShaper.h b/gfx/thebes/src/gfxCoreTextShaper.h
--- a/gfx/thebes/src/gfxCoreTextShaper.h
+++ b/gfx/thebes/src/gfxCoreTextShaper.h
@@ -45,15 +45,24 @@
 #include "gfxFont.h"
 #include "gfxFontUtils.h"
 #include "gfxPlatform.h"
+
+#ifdef MOZ_WIDGET_COCOA
 #include "gfxMacPlatformFontList.h"
-
 #include <Carbon/Carbon.h>
 
 class gfxMacFont;
+typedef gfxMacFont gfxCTFont;
+#else
+#include "gfxUIKitPlatformFontList.h"
+#include <CoreText/CoreText.h>
+
+class gfxUIKitFont;
+typedef gfxUIKitFont gfxCTFont;
+#endif
 
 class gfxCoreTextShaper : public gfxFontShaper {
 public:
-    gfxCoreTextShaper(gfxMacFont *aFont);
+    gfxCoreTextShaper(gfxUIKitFont *aFont);
 
     virtual ~gfxCoreTextShaper();
 
@@ -85,7 +94,9 @@
         return sDefaultFeaturesDescriptor;
     }
 
+#ifdef MOZ_WIDGET_COCOA
     static CTFontRef CreateCTFontWithDisabledLigatures(ATSFontRef aFontRef, CGFloat aSize);
+#endif
 
     // cached font descriptor, created the first time it's needed
     static CTFontDescriptorRef    sDefaultFeaturesDescriptor;
diff --git a/gfx/thebes/src/gfxPlatformMac.cpp b/gfx/thebes/src/gfxPlatformMac.cpp
--- a/gfx/thebes/src/gfxPlatformMac.cpp
+++ b/gfx/thebes/src/gfxPlatformMac.cpp
@@ -42,8 +42,14 @@
 #include "gfxQuartzSurface.h"
 #include "gfxQuartzImageSurface.h"
 
+#ifdef MOZ_WIDGET_COCOA
 #include "gfxMacPlatformFontList.h"
 #include "gfxMacFont.h"
+#else
+#include "gfxUIKitPlatformFontList.h"
+#include "gfxUIKitFont.h"
+#endif
+
 #include "gfxCoreTextShaper.h"
 #include "gfxUserFontSet.h"
 
@@ -71,7 +77,11 @@
 gfxPlatformFontList*
 gfxPlatformMac::CreatePlatformFontList()
 {
+#ifdef MOZ_WIDGET_COCOA
     return new gfxMacPlatformFontList();
+#else
+    return new gfxUIKitPlatformFontList();
+#endif
 }
 
 already_AddRefed<gfxASurface>
@@ -201,6 +211,7 @@
 PRInt32 
 gfxPlatformMac::OSXVersion()
 {
+#ifdef MOZ_WIDGET_COCOA
     if (!mOSXVersion) {
         // minor version is not accurate, use gestaltSystemVersionMajor, gestaltSystemVersionMinor, gestaltSystemVersionBugFix for these
         OSErr err = ::Gestalt(gestaltSystemVersion, reinterpret_cast<SInt32*>(&mOSXVersion));
@@ -210,6 +221,9 @@
             mOSXVersion = MAC_OS_X_VERSION_10_4_HEX;
         }
     }
+#else
+    mOSXVersion = MAC_OS_X_VERSION_10_4_HEX;
+#endif
     return mOSXVersion;
 }
 
@@ -233,7 +247,8 @@
     // if the pref setting is disabled, return 0 which effectively disables this feature
     if (!useAntiAliasingThreshold)
         return threshold;
-        
+
+#ifdef MOZ_WIDGET_COCOA
     // value set via Appearance pref panel, "Turn off text smoothing for font sizes xxx and smaller"
     CFNumberRef prefValue = (CFNumberRef)CFPreferencesCopyAppValue(CFSTR("AppleAntiAliasingThreshold"), kCFPreferencesCurrentApplication);
 
@@ -243,6 +258,7 @@
         }
         CFRelease(prefValue);
     }
+#endif
 
     return threshold;
 }
@@ -250,6 +266,7 @@
 qcms_profile *
 gfxPlatformMac::GetPlatformCMSOutputProfile()
 {
+#ifdef MOZ_WIDGET_COCOA
     qcms_profile *profile = nsnull;
     CMProfileRef cmProfile;
     CMProfileLocation *location;
@@ -327,4 +344,7 @@
 fail_close:
     CMCloseProfile(cmProfile);
     return profile;
+#else
+    return nsnull;
+#endif // MOZ_WIDGET_COCOA
 }
diff --git a/gfx/thebes/src/gfxMacFont.h b/gfx/thebes/src/gfxUIKitFont.h
copy from gfx/thebes/src/gfxMacFont.h
copy to gfx/thebes/src/gfxUIKitFont.h
--- a/gfx/thebes/src/gfxMacFont.h
+++ b/gfx/thebes/src/gfxUIKitFont.h
@@ -42,19 +42,19 @@
 #define GFX_MACFONT_H
 
 #include "gfxFont.h"
-#include "gfxMacPlatformFontList.h"
+#include "gfxUIKitPlatformFontList.h"
 
 #include "cairo.h"
 
-class gfxMacFont : public gfxFont
+class gfxUIKitFont : public gfxFont
 {
 public:
-    gfxMacFont(MacOSFontEntry *aFontEntry, const gfxFontStyle *aFontStyle,
+    gfxUIKitFont(UIKitFontEntry *aFontEntry, const gfxFontStyle *aFontStyle,
                PRBool aNeedsBold);
 
-    virtual ~gfxMacFont();
+    virtual ~gfxUIKitFont();
 
-    ATSFontRef GetATSFontRef() const { return mATSFont; }
+    CFStringRef GetPostscriptName() { return mPostscriptName; }
 
     // TODO: probably should move this up to gfxFont
     // and ensure it is handled uniformly across all platforms
@@ -72,13 +72,13 @@
     virtual PRBool SetupCairoFont(gfxContext *aContext);
 
 protected:
-    void InitMetrics();
+    void InitMetrics(CTFontRef aCTFont, gfxFloat size);
 
     float GetCharWidth(CTFontRef aCTFont, PRUnichar aUniChar,
                        PRUint32 *aGlyphID);
     float GetCharHeight(CTFontRef aCTFont, PRUnichar aUniChar);
 
-    ATSFontRef            mATSFont;
+    CFStringRef          mPostscriptName;
 
     cairo_font_face_t    *mFontFace;
     cairo_scaled_font_t  *mScaledFont;
diff --git a/gfx/thebes/src/gfxMacFont.cpp b/gfx/thebes/src/gfxUIKitFont.mm
copy from gfx/thebes/src/gfxMacFont.cpp
copy to gfx/thebes/src/gfxUIKitFont.mm
--- a/gfx/thebes/src/gfxMacFont.cpp
+++ b/gfx/thebes/src/gfxUIKitFont.mm
@@ -38,17 +38,17 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
-#include "gfxMacFont.h"
+#include "gfxUIKitFont.h"
 #include "gfxCoreTextShaper.h"
 #include "gfxPlatformMac.h"
 #include "gfxContext.h"
 
 #include "cairo-quartz.h"
 
-gfxMacFont::gfxMacFont(MacOSFontEntry *aFontEntry, const gfxFontStyle *aFontStyle,
+gfxUIKitFont::gfxUIKitFont(UIKitFontEntry *aFontEntry, const gfxFontStyle *aFontStyle,
                        PRBool aNeedsBold)
     : gfxFont(aFontEntry, aFontStyle),
-      mATSFont(aFontEntry->GetFontRef()),
+      mPostscriptName(aFontEntry->GetPostscriptName()),
       mFontFace(nsnull),
       mScaledFont(nsnull),
       mAdjustedSize(0.0)
@@ -58,13 +58,19 @@
     }
 
     // InitMetrics will handle the sizeAdjust factor and set mAdjustedSize
-    InitMetrics();
-    if (!mIsValid)
+    gfxFloat size =
+        PR_MAX(((mAdjustedSize != 0.0f) ? mAdjustedSize : mStyle.size), 1.0f);
+    CTFontRef ctFont = ::CTFontCreateWithName(mPostscriptName, size, NULL);
+    InitMetrics(ctFont, size);
+    if (!mIsValid) {
+        ::CFRelease(ctFont);
         return;
+    }
 
-    CGFontRef cgFont = ::CGFontCreateWithPlatformFont(&mATSFont);
+    CGFontRef cgFont = ::CTFontCopyGraphicsFont(ctFont, NULL);
     mFontFace = cairo_quartz_font_face_create_for_cgfont(cgFont);
     ::CGFontRelease(cgFont);
+    ::CFRelease(ctFont);
 
     cairo_status_t cairoerr = cairo_font_face_status(mFontFace);
     if (cairoerr != CAIRO_STATUS_SUCCESS) {
@@ -82,25 +88,6 @@
     cairo_matrix_init_identity(&ctm);
     cairo_matrix_init_scale(&sizeMatrix, mAdjustedSize, mAdjustedSize);
 
-    // synthetic oblique by skewing via the font matrix
-    PRBool needsOblique =
-        (mFontEntry != NULL) &&
-        (!mFontEntry->IsItalic() && (mStyle.style & (FONT_STYLE_ITALIC | FONT_STYLE_OBLIQUE)));
-
-    if (needsOblique) {
-        double skewfactor = (needsOblique ? Fix2X(kATSItalicQDSkew) : 0);
-
-        cairo_matrix_t style;
-        cairo_matrix_init(&style,
-                          1,                //xx
-                          0,                //yx
-                          -1 * skewfactor,   //xy
-                          1,                //yy
-                          0,                //x0
-                          0);               //y0
-        cairo_matrix_multiply(&sizeMatrix, &sizeMatrix, &style);
-    }
-
     cairo_font_options_t *fontOptions = cairo_font_options_create();
 
     // turn off font anti-aliasing based on user pref setting
@@ -125,7 +112,7 @@
     mShaper = new gfxCoreTextShaper(this);
 }
 
-gfxMacFont::~gfxMacFont()
+gfxUIKitFont::~gfxUIKitFont()
 {
     if (mScaledFont) {
         cairo_scaled_font_destroy(mScaledFont);
@@ -136,7 +123,7 @@
 }
 
 PRBool
-gfxMacFont::SetupCairoFont(gfxContext *aContext)
+gfxUIKitFont::SetupCairoFont(gfxContext *aContext)
 {
     if (cairo_scaled_font_status(mScaledFont) != CAIRO_STATUS_SUCCESS) {
         // Don't cairo_set_scaled_font as that would propagate the error to
@@ -154,38 +141,10 @@
 }
 
 void
-gfxMacFont::InitMetrics()
+gfxUIKitFont::InitMetrics(CTFontRef aCTFont, gfxFloat size)
 {
-    gfxFloat size =
-        PR_MAX(((mAdjustedSize != 0.0f) ? mAdjustedSize : mStyle.size), 1.0f);
 
-    ATSFontMetrics atsMetrics;
-    OSStatus err;
-
-    err = ::ATSFontGetHorizontalMetrics(mATSFont, kATSOptionFlagsDefault,
-                                        &atsMetrics);
-    if (err != noErr) {
-        mIsValid = PR_FALSE;
-
-#ifdef DEBUG
-        char warnBuf[1024];
-        sprintf(warnBuf, "Bad font metrics for: %s err: %8.8x",
-                NS_ConvertUTF16toUTF8(mFontEntry->Name()).get(), PRUint32(err));
-        NS_WARNING(warnBuf);
-#endif
-        return;
-    }
-
-    // create a temporary local CTFont for glyph measurement
-    CTFontRef aCTFont =
-        ::CTFontCreateWithPlatformFont(mATSFont, size, NULL, NULL);
-
-    // prefer to get xHeight from ATS metrics (unhinted) rather than Core Text (hinted),
-    // see bug 429605.
-    if (atsMetrics.xHeight > 0)
-        mMetrics.xHeight = atsMetrics.xHeight * size;
-    else
-        mMetrics.xHeight = GetCharHeight(aCTFont, 'x');
+    mMetrics.xHeight = GetCharHeight(aCTFont, 'x');
 
     if (mAdjustedSize == 0.0f) {
         if (mMetrics.xHeight != 0.0f && mStyle.sizeAdjust != 0.0f) {
@@ -194,10 +153,7 @@
 
             // the recursive call to InitMetrics will see the adjusted size,
             // and set up the rest of the metrics fields accordingly
-            InitMetrics();
-
-            // release our temporary CTFont
-            ::CFRelease(aCTFont);
+            InitMetrics(aCTFont, size);
             return;
         }
         mAdjustedSize = size;
@@ -205,17 +161,10 @@
 
     mMetrics.superscriptOffset = mMetrics.xHeight;
     mMetrics.subscriptOffset = mMetrics.xHeight;
-    mMetrics.underlineOffset = atsMetrics.underlinePosition * size;
-    mMetrics.underlineSize = atsMetrics.underlineThickness * size;
     mMetrics.strikeoutSize = mMetrics.underlineSize;
     mMetrics.strikeoutOffset = mMetrics.xHeight / 2;
 
-    mMetrics.externalLeading = atsMetrics.leading * size;
     mMetrics.emHeight = size;
-    mMetrics.maxAscent =
-      NS_ceil(RoundToNearestMultiple(atsMetrics.ascent * size, 1/1024.0));
-    mMetrics.maxDescent =
-      NS_ceil(-RoundToNearestMultiple(atsMetrics.descent * size, 1/1024.0));
 
     mMetrics.maxHeight = mMetrics.maxAscent + mMetrics.maxDescent;
     if (mMetrics.maxHeight - mMetrics.emHeight > 0.0)
@@ -223,16 +172,12 @@
     else
         mMetrics.internalLeading = 0.0;
 
-    mMetrics.maxAdvance = atsMetrics.maxAdvanceWidth * size + mSyntheticBoldOffset;
-
     mMetrics.emAscent = mMetrics.maxAscent * mMetrics.emHeight / mMetrics.maxHeight;
     mMetrics.emDescent = mMetrics.emHeight - mMetrics.emAscent;
 
     PRUint32 glyphID;
     float xWidth = GetCharWidth(aCTFont, 'x', &glyphID);
-    if (atsMetrics.avgAdvanceWidth != 0.0)
-        mMetrics.aveCharWidth = PR_MIN(atsMetrics.avgAdvanceWidth * size, xWidth);
-    else if (glyphID != 0)
+    if (glyphID != 0)
         mMetrics.aveCharWidth = xWidth;
     else
         mMetrics.aveCharWidth = mMetrics.maxAdvance;
@@ -252,8 +197,6 @@
     if (glyphID == 0)
         mMetrics.zeroOrAveCharWidth = mMetrics.aveCharWidth;
 
-    ::CFRelease(aCTFont);
-
     SanitizeMetrics(&mMetrics, mFontEntry->mIsBadUnderlineFont);
 
     mIsValid = PR_TRUE;
@@ -271,7 +214,7 @@
 }
 
 float
-gfxMacFont::GetCharWidth(CTFontRef aCTFont, PRUnichar aUniChar,
+gfxUIKitFont::GetCharWidth(CTFontRef aCTFont, PRUnichar aUniChar,
                          PRUint32 *aGlyphID)
 {
     UniChar c = aUniChar;
@@ -295,7 +238,7 @@
 }
 
 float
-gfxMacFont::GetCharHeight(CTFontRef aCTFont, PRUnichar aUniChar)
+gfxUIKitFont::GetCharHeight(CTFontRef aCTFont, PRUnichar aUniChar)
 {
     UniChar c = aUniChar;
     CGGlyph glyph;
diff --git a/gfx/thebes/src/gfxMacPlatformFontList.h b/gfx/thebes/src/gfxUIKitPlatformFontList.h
copy from gfx/thebes/src/gfxMacPlatformFontList.h
copy to gfx/thebes/src/gfxUIKitPlatformFontList.h
--- a/gfx/thebes/src/gfxMacPlatformFontList.h
+++ b/gfx/thebes/src/gfxUIKitPlatformFontList.h
@@ -19,10 +19,7 @@
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
- *   Vladimir Vukicevic <vladimir@pobox.com>
- *   Masayuki Nakano <masayuki@d-toybox.com>
- *   John Daggett <jdaggett@mozilla.com>
- *   Jonathan Kew <jfkthame@gmail.com>
+ *  Ted Mielczarek <ted.mielczarek@gmail.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
@@ -38,8 +35,8 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
-#ifndef gfxMacPlatformFontList_H_
-#define gfxMacPlatformFontList_H_
+#ifndef gfxUIKitPlatformFontList_H_
+#define gfxUIKitPlatformFontList_H_
 
 #include "nsDataHashtable.h"
 #include "nsRefPtrHashtable.h"
@@ -47,28 +44,29 @@
 #include "gfxPlatformFontList.h"
 #include "gfxPlatform.h"
 
-#include <Carbon/Carbon.h>
-
 #include "nsUnicharUtils.h"
 #include "nsTArray.h"
 
-class gfxMacPlatformFontList;
+#include <CoreText/CoreText.h>
+
+class gfxUIKitPlatformFontList;
 
 // a single member of a font family (i.e. a single face, such as Times Italic)
-class MacOSFontEntry : public gfxFontEntry
+class UIKitFontEntry : public gfxFontEntry
 {
 public:
-    friend class gfxMacPlatformFontList;
+    friend class gfxUIKitPlatformFontList;
 
-    MacOSFontEntry(const nsAString& aPostscriptName, PRInt32 aWeight,
+    UIKitFontEntry(const nsAString& aPostscriptName, PRInt32 aWeight,
                    gfxFontFamily *aFamily, PRBool aIsStandardFace = PR_FALSE);
 
-    ATSFontRef GetFontRef();
     nsresult ReadCMAP();
 
+    CFStringRef GetPostscriptName() { return mPostscriptName; }
+
 protected:
     // for use with data fonts
-    MacOSFontEntry(const nsAString& aPostscriptName, ATSFontRef aFontRef,
+    UIKitFontEntry(const nsAString& aPostscriptName,
                    PRUint16 aWeight, PRUint16 aStretch, PRUint32 aItalicStyle,
                    gfxUserFontData *aUserFontData);
 
@@ -76,14 +74,13 @@
 
     virtual gfxFont* CreateFontInstance(const gfxFontStyle *aFontStyle, PRBool aNeedsBold);
 
-    ATSFontRef mATSFontRef;
-    PRPackedBool mATSFontRefInitialized;
+    CFStringRef mPostscriptName;
 };
 
-class gfxMacPlatformFontList : public gfxPlatformFontList {
+class gfxUIKitPlatformFontList : public gfxPlatformFontList {
 public:
-    static gfxMacPlatformFontList* PlatformFontList() {
-        return static_cast<gfxMacPlatformFontList*>(sPlatformFontList);
+    static gfxUIKitPlatformFontList* PlatformFontList() {
+        return static_cast<gfxUIKitPlatformFontList*>(sPlatformFontList);
     }
 
     static PRInt32 AppleWeightToCSSWeight(PRInt32 aAppleWeight);
@@ -103,7 +100,7 @@
 private:
     friend class gfxPlatformMac;
 
-    gfxMacPlatformFontList();
+    gfxUIKitPlatformFontList();
 
     // initialize font lists
     virtual void InitFontList();
@@ -113,15 +110,6 @@
 
     // eliminate faces which have the same ATS font reference
     void EliminateDuplicateFaces(const nsAString& aFamilyName);
-
-    static void ATSNotification(ATSFontNotificationInfoRef aInfo, void* aUserArg);
-
-    // keep track of ATS generation to prevent unneeded updates when loading downloaded fonts
-    PRUint32 mATSGeneration;
-
-    enum {
-        kATSGenerationInitial = -1
-    };
 };
 
-#endif /* gfxMacPlatformFontList_H_ */
+#endif /* gfxUIKitPlatformFontList_H_ */
diff --git a/gfx/thebes/src/gfxMacPlatformFontList.mm b/gfx/thebes/src/gfxUIKitPlatformFontList.mm
copy from gfx/thebes/src/gfxMacPlatformFontList.mm
copy to gfx/thebes/src/gfxUIKitPlatformFontList.mm
--- a/gfx/thebes/src/gfxMacPlatformFontList.mm
+++ b/gfx/thebes/src/gfxUIKitPlatformFontList.mm
@@ -38,13 +38,12 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
-#include <Carbon/Carbon.h>
-
-#import <AppKit/AppKit.h>
+#import <Foundation/Foundation.h>
+#import <UIKit/UIFont.h>
 
 #include "gfxPlatformMac.h"
-#include "gfxMacPlatformFontList.h"
-#include "gfxMacFont.h"
+#include "gfxUIKitPlatformFontList.h"
+#include "gfxUIKitFont.h"
 #include "gfxUserFontSet.h"
 
 #include "nsServiceManagerUtils.h"
@@ -105,9 +104,6 @@
     9  // 14
 };
 
-// cache Cocoa's "shared font manager" for performance
-static NSFontManager *sFontManager;
-
 static void GetStringForNSString(const NSString *aSrc, nsAString& aDist)
 {
     aDist.SetLength([aSrc length]);
@@ -130,23 +126,21 @@
 /* MacOSFontEntry */
 #pragma mark-
 
-MacOSFontEntry::MacOSFontEntry(const nsAString& aPostscriptName,
+UIKitFontEntry::UIKitFontEntry(const nsAString& aPostscriptName,
                                PRInt32 aWeight,
                                gfxFontFamily *aFamily,
                                PRBool aIsStandardFace)
     : gfxFontEntry(aPostscriptName, aFamily, aIsStandardFace),
-      mATSFontRef(0),
-      mATSFontRefInitialized(PR_FALSE)
+      mPostscriptName((CFStringRef)GetNSStringForString(aPostscriptName))
 {
     mWeight = aWeight;
 }
 
-MacOSFontEntry::MacOSFontEntry(const nsAString& aPostscriptName, ATSFontRef aFontRef,
+UIKitFontEntry::UIKitFontEntry(const nsAString& aPostscriptName,
                                PRUint16 aWeight, PRUint16 aStretch, PRUint32 aItalicStyle,
                                gfxUserFontData *aUserFontData)
     : gfxFontEntry(aPostscriptName),
-      mATSFontRef(aFontRef),
-      mATSFontRefInitialized(PR_TRUE)
+      mPostscriptName((CFStringRef)GetNSStringForString(aPostscriptName))
 {
     // xxx - stretch is basically ignored for now
 
@@ -158,18 +152,6 @@
     mIsUserFont = aUserFontData != nsnull;
 }
 
-ATSFontRef
-MacOSFontEntry::GetFontRef()
-{
-    if (!mATSFontRefInitialized) {
-        mATSFontRefInitialized = PR_TRUE;
-        NSString *psname = GetNSStringForString(mName);
-        mATSFontRef = ::ATSFontFindFromPostScriptName(CFStringRef(psname),
-                                                      kATSOptionFlagsDefault);
-    }
-    return mATSFontRef;
-}
-
 // ATSUI requires AAT-enabled fonts to render complex scripts correctly.
 // For now, simple clear out the cmap codepoints for fonts that have
 // codepoints for complex scripts. (Bug 361986)
@@ -196,11 +178,8 @@
 };
 
 nsresult
-MacOSFontEntry::ReadCMAP()
+UIKitFontEntry::ReadCMAP()
 {
-    OSStatus status;
-    ByteCount size;
-
     // attempt this once, if errors occur leave a blank cmap
     if (mCmapInitialized)
         return NS_OK;
@@ -221,65 +200,6 @@
         return rv;
     }
 
-    // for complex scripts, check for the presence of mort/morx
-    PRBool checkedForMorphTable = PR_FALSE, hasMorphTable = PR_FALSE;
-
-    ATSFontRef fontRef = GetFontRef();
-    PRUint32 s, numScripts = sizeof(gScriptsThatRequireShaping) / sizeof(ScriptRange);
-
-    for (s = 0; s < numScripts; s++) {
-        eComplexScript  whichScript = gScriptsThatRequireShaping[s].script;
-
-        // check to see if the cmap includes complex script codepoints
-        if (mCharacterMap.TestRange(gScriptsThatRequireShaping[s].rangeStart,
-                                    gScriptsThatRequireShaping[s].rangeEnd)) {
-            PRBool omitRange = PR_TRUE;
-
-            // check for mort/morx table, if haven't already
-            if (!checkedForMorphTable) {
-                status = ::ATSFontGetTable(fontRef, TRUETYPE_TAG('m','o','r','x'), 0, 0, 0, &size);
-                if (status == noErr) {
-                    checkedForMorphTable = PR_TRUE;
-                    hasMorphTable = PR_TRUE;
-                } else {
-                    // check for a mort table
-                    status = ::ATSFontGetTable(fontRef, TRUETYPE_TAG('m','o','r','t'), 0, 0, 0, &size);
-                    checkedForMorphTable = PR_TRUE;
-                    if (status == noErr) {
-                        hasMorphTable = PR_TRUE;
-                    }
-                }
-            }
-
-            if (hasMorphTable) {
-                omitRange = PR_FALSE;
-            }
-
-            // special-cases for Arabic:
-            if (whichScript == eComplexScriptArabic) {
-                // even if there's no morph table, CoreText can shape Arabic
-                // if there's GSUB support
-                status = ::ATSFontGetTable(fontRef, TRUETYPE_TAG('G','S','U','B'), 0, 0, 0, &size);
-                if (status == noErr) {
-                    // TODO: to be really thorough, we could check that the GSUB table
-                    // actually supports the 'arab' script tag.
-                    omitRange = PR_FALSE;
-                }
-
-                // rude hack - the Chinese STxxx fonts on 10.4 contain morx tables and Arabic glyphs but
-                // lack the proper info for shaping Arabic, so exclude explicitly, ick
-                if (mName.CharAt(0) == 'S' && mName.CharAt(1) == 'T') {
-                    omitRange = PR_TRUE;
-                }
-            }
-
-            if (omitRange) {
-                mCharacterMap.ClearRange(gScriptsThatRequireShaping[s].rangeStart,
-                                         gScriptsThatRequireShaping[s].rangeEnd);
-            }
-        }
-    }
-
     PR_LOG(gFontInfoLog, PR_LOG_DEBUG, ("(fontinit-cmap) psname: %s, size: %d\n",
                                         NS_ConvertUTF16toUTF8(mName).get(), mCharacterMap.GetSize()));
 
@@ -287,80 +207,59 @@
 }
 
 nsresult
-MacOSFontEntry::GetFontTable(PRUint32 aTableTag, nsTArray<PRUint8>& aBuffer)
+UIKitFontEntry::GetFontTable(PRUint32 aTableTag, nsTArray<PRUint8>& aBuffer)
 {
     nsAutoreleasePool localPool;
 
-    ATSFontRef fontRef = GetFontRef();
-    if (fontRef == (ATSFontRef)kATSUInvalidFontID)
-        return NS_ERROR_FAILURE;
+    CTFontRef ctFont = ::CTFontCreateWithName(mPostscriptName, 10, NULL);
+    CFDataRef table  = ::CTFontCopyTable(ctFont, aTableTag, kCTFontTableOptionNoOptions);
+    ::CFRelease(ctFont);
 
-    ByteCount dataLength;
-    OSStatus status = ::ATSFontGetTable(fontRef, aTableTag, 0, 0, 0, &dataLength);
-    NS_ENSURE_TRUE(status == noErr, NS_ERROR_FAILURE);
+    if (!aBuffer.AppendElements(CFDataGetLength(table))) {
+        ::CFRelease(table);
+        return NS_ERROR_OUT_OF_MEMORY;
+    }
 
-    if (!aBuffer.AppendElements(dataLength))
-        return NS_ERROR_OUT_OF_MEMORY;
-    PRUint8 *dataPtr = aBuffer.Elements();
-
-    status = ::ATSFontGetTable(fontRef, aTableTag, 0, dataLength, dataPtr, &dataLength);
-    NS_ENSURE_TRUE(status == noErr, NS_ERROR_FAILURE);
+    CFDataGetBytes(table,
+                   CFRangeMake(0, CFDataGetLength(table)),
+                   aBuffer.Elements());
+    ::CFRelease(table);
 
     return NS_OK;
 }
 
 gfxFont*
-MacOSFontEntry::CreateFontInstance(const gfxFontStyle *aFontStyle, PRBool aNeedsBold)
+UIKitFontEntry::CreateFontInstance(const gfxFontStyle *aFontStyle, PRBool aNeedsBold)
 {
-    return new gfxMacFont(this, aFontStyle, aNeedsBold);
+    return new gfxUIKitFont(this, aFontStyle, aNeedsBold);
 }
 
 
-/* gfxMacFontFamily */
+/* gfxUIKitFontFamily */
 #pragma mark-
 
-class gfxMacFontFamily : public gfxFontFamily
+class gfxUIKitFontFamily : public gfxFontFamily
 {
 public:
-    gfxMacFontFamily(nsAString& aName) :
+    gfxUIKitFontFamily(nsAString& aName) :
         gfxFontFamily(aName)
     {}
 
-    virtual ~gfxMacFontFamily() {}
+    virtual ~gfxUIKitFontFamily() {}
 
     virtual void LocalizedName(nsAString& aLocalizedName);
 
     virtual void FindStyleVariations();
-
-    void EliminateDuplicateFaces();
 };
 
 void
-gfxMacFontFamily::LocalizedName(nsAString& aLocalizedName)
+gfxUIKitFontFamily::LocalizedName(nsAString& aLocalizedName)
 {
-    nsAutoreleasePool localPool;
-
-    if (!HasOtherFamilyNames()) {
-        aLocalizedName = mName;
-        return;
-    }
-
-    NSString *family = GetNSStringForString(mName);
-    NSString *localized = [sFontManager
-                           localizedNameForFamily:family
-                                             face:nil];
-
-    if (localized) {
-        GetStringForNSString(localized, aLocalizedName);
-        return;
-    }
-
-    // failed to get localized name, just use the canonical one
     aLocalizedName = mName;
 }
 
 void
-gfxMacFontFamily::FindStyleVariations()
+gfxUIKitFontFamily::FindStyleVariations()
 {
     if (mHasStyles)
         return;
@@ -368,39 +267,15 @@
     nsAutoreleasePool localPool;
 
     NSString *family = GetNSStringForString(mName);
-
-    // create a font entry for each face
-    NSArray *fontfaces = [sFontManager
-                          availableMembersOfFontFamily:family];  // returns an array of [psname, style name, weight, traits] elements, goofy api
-    int faceCount = [fontfaces count];
-    int faceIndex;
-
-    // Bug 420981 - under 10.5, UltraLight and Light have the same weight value
-    PRBool needToCheckLightFaces =
-        (gfxPlatformMac::GetPlatform()->OSXVersion() >= MAC_OS_X_VERSION_10_5_HEX);
-
-    for (faceIndex = 0; faceIndex < faceCount; faceIndex++) {
-        NSArray *face = [fontfaces objectAtIndex:faceIndex];
-        NSString *psname = [face objectAtIndex:INDEX_FONT_POSTSCRIPT_NAME];
-        PRInt32 appKitWeight = [[face objectAtIndex:INDEX_FONT_WEIGHT] unsignedIntValue];
-        PRUint32 macTraits = [[face objectAtIndex:INDEX_FONT_TRAITS] unsignedIntValue];
-        NSString *facename = [face objectAtIndex:INDEX_FONT_FACE_NAME];
+    for (NSString* psname in [UIFont fontNamesForFamilyName:family]) {
         PRBool isStandardFace = PR_FALSE;
-
-        if (needToCheckLightFaces && appKitWeight == kAppleExtraLightWeight) {
-            // if the facename contains UltraLight, set the weight to the ultralight weight value
-            NSRange range = [facename rangeOfString:@"ultralight" options:NSCaseInsensitiveSearch];
-            if (range.location != NSNotFound) {
-                appKitWeight = kAppleUltraLightWeight;
-            }
-        }
-
-        PRInt32 cssWeight = gfxMacPlatformFontList::AppleWeightToCSSWeight(appKitWeight) * 100;
-
         // make a nsString
         nsAutoString postscriptFontName;
         GetStringForNSString(psname, postscriptFontName);
 
+        CTFontRef ctFont = ::CTFontCreateWithName((CFStringRef)psname, 10, NULL);
+        CFDictionaryRef traits = ::CTFontCopyTraits(ctFont);
+        NSString* facename = (NSString*)CTFontCopyName(ctFont, kCTFontStyleNameKey);
         if ([facename isEqualToString:@"Regular"] ||
             [facename isEqualToString:@"Bold"] ||
             [facename isEqualToString:@"Italic"] ||
@@ -410,25 +285,21 @@
         {
             isStandardFace = PR_TRUE;
         }
+        ::CFRelease(ctFont);
+
+        CFNumberRef weight = (CFNumberRef)::CFDictionaryGetValue(traits, kCTFontWeightTrait);
+        double ctWeight;
+        CFNumberGetValue(weight, kCFNumberDoubleType, &ctWeight);
+        ::CFRelease(traits);
+        ::CFRelease(weight);
+        PRInt32 cssWeight = PRInt32(round(((ctWeight + 1.0) / 2.0) * 9.0));
+
 
         // create a font entry
-        MacOSFontEntry *fontEntry = new MacOSFontEntry(postscriptFontName,
+        UIKitFontEntry *fontEntry = new UIKitFontEntry(postscriptFontName,
                                                        cssWeight, this, isStandardFace);
         if (!fontEntry) break;
 
-        // set additional properties based on the traits reported by Cocoa
-        if (macTraits & (NSCondensedFontMask | NSNarrowFontMask | NSCompressedFontMask)) {
-            fontEntry->mStretch = NS_FONT_STRETCH_CONDENSED;
-        } else if (macTraits & NSExpandedFontMask) {
-            fontEntry->mStretch = NS_FONT_STRETCH_EXPANDED;
-        }
-        if (macTraits & NSItalicFontMask) {
-            fontEntry->mItalic = PR_TRUE;
-        }
-        if (macTraits & NSFixedPitchFontMask) {
-            fontEntry->mFixedPitch = PR_TRUE;
-        }
-
 #ifdef PR_LOGGING
         if (LOG_ENABLED()) {
             LOG(("(fontinit) added (%s) to family (%s)"
@@ -454,55 +325,6 @@
     }
 }
 
-void
-gfxMacFontFamily::EliminateDuplicateFaces()
-{
-    PRUint32 i, bold, numFonts, italicIndex;
-    MacOSFontEntry *italic, *nonitalic;
-
-    FindStyleVariations();
-
-    // if normal and italic have the same ATS font ref, delete italic
-    // if bold and bold-italic have the same ATS font ref, delete bold-italic
-
-    // two iterations, one for normal, one for bold
-    for (bold = 0; bold < 2; bold++) {
-        numFonts = mAvailableFonts.Length();
-
-        // find the non-italic face
-        nonitalic = nsnull;
-        for (i = 0; i < numFonts; i++) {
-            if ((mAvailableFonts[i]->IsBold() == (bold == 1)) &&
-                !mAvailableFonts[i]->IsItalic()) {
-                nonitalic = static_cast<MacOSFontEntry*>(mAvailableFonts[i].get());
-                break;
-            }
-        }
-
-        // find the italic face
-        if (nonitalic) {
-            italic = nsnull;
-            for (i = 0; i < numFonts; i++) {
-                if ((mAvailableFonts[i]->IsBold() == (bold == 1)) &&
-                     mAvailableFonts[i]->IsItalic()) {
-                    italic = static_cast<MacOSFontEntry*>(mAvailableFonts[i].get());
-                    italicIndex = i;
-                    break;
-                }
-            }
-
-            // if italic face and non-italic face have matching ATS refs,
-            // or if the italic returns 0 rather than an actual ATSFontRef,
-            // then the italic face is bogus so remove it
-            if (italic && (italic->GetFontRef() == 0 ||
-                           italic->GetFontRef() == nonitalic->GetFontRef())) {
-                mAvailableFonts.RemoveElementAt(italicIndex);
-            }
-        }
-    }
-}
-
-
 /* gfxSingleFaceMacFontFamily */
 #pragma mark-
 
@@ -530,17 +352,6 @@
         return;
     }
 
-    gfxFontEntry *fe = mAvailableFonts[0];
-    NSFont *font = [NSFont fontWithName:GetNSStringForString(fe->Name())
-                                   size:0.0];
-    if (font) {
-        NSString *localized = [font displayName];
-        if (localized) {
-            GetStringForNSString(localized, aLocalizedName);
-            return;
-        }
-    }
-
     // failed to get localized name, just use the canonical one
     aLocalizedName = mName;
 }
@@ -568,56 +379,33 @@
 }
 
 
-/* gfxMacPlatformFontList */
+/* gfxUIKitPlatformFontList */
 #pragma mark-
 
-gfxMacPlatformFontList::gfxMacPlatformFontList() :
-    gfxPlatformFontList(PR_FALSE), mATSGeneration(PRUint32(kATSGenerationInitial))
+gfxUIKitPlatformFontList::gfxUIKitPlatformFontList() :
+    gfxPlatformFontList(PR_FALSE)
 {
-    ::ATSFontNotificationSubscribe(ATSNotification,
-                                   kATSFontNotifyOptionDefault,
-                                   (void*)this, nsnull);
-
     // this should always be available (though we won't actually fail if it's missing,
     // we'll just end up doing a search and then caching the new result instead)
-    mReplacementCharFallbackFamily = NS_LITERAL_STRING("Lucida Grande");
-
-    // cache this in a static variable so that MacOSFontFamily objects
-    // don't have to repeatedly look it up
-    sFontManager = [NSFontManager sharedFontManager];
+    mReplacementCharFallbackFamily = NS_LITERAL_STRING("Helvetica");
 }
 
 void
-gfxMacPlatformFontList::InitFontList()
+gfxUIKitPlatformFontList::InitFontList()
 {
     nsAutoreleasePool localPool;
 
-    ATSGeneration currentGeneration = ::ATSGetGeneration();
-
-    // need to ignore notifications after adding each font
-    if (mATSGeneration == currentGeneration)
-        return;
-
-    mATSGeneration = currentGeneration;
-    PR_LOG(gFontInfoLog, PR_LOG_DEBUG, ("(fontinit) updating to generation: %d", mATSGeneration));
-
     // reset font lists
     gfxPlatformFontList::InitFontList();
     
-    // iterate over available families
-    NSEnumerator *families = [[sFontManager availableFontFamilies]
-                              objectEnumerator];  // returns "canonical", non-localized family name
-
     nsAutoString availableFamilyName;
-
     NSString *availableFamily = nil;
-    while ((availableFamily = [families nextObject])) {
-
+    for (availableFamily in [UIFont familyNames]) {
         // make a nsString
         GetStringForNSString(availableFamily, availableFamilyName);
 
         // create a family entry
-        gfxFontFamily *familyEntry = new gfxMacFontFamily(availableFamilyName);
+        gfxFontFamily *familyEntry = new gfxUIKitFontFamily(availableFamilyName);
         if (!familyEntry) break;
 
         // add the family entry to the hash table
@@ -636,25 +424,12 @@
     // a font lookup miss earlier. this is a simple optimization, it's not required for correctness
     PreloadNamesList();
 
-    // clean up various minor 10.4 font problems for specific fonts
-    if (gfxPlatformMac::GetPlatform()->OSXVersion() < MAC_OS_X_VERSION_10_5_HEX) {
-        // Cocoa calls report that italic faces exist for Courier and Helvetica,
-        // even though only bold faces exist so test for this using ATS font refs (10.5 has proper faces)
-        EliminateDuplicateFaces(NS_LITERAL_STRING("Courier"));
-        EliminateDuplicateFaces(NS_LITERAL_STRING("Helvetica"));
-
-        // Cocoa reports that Courier and Monaco are not fixed-pitch fonts
-        // so explicitly tweak these settings
-        SetFixedPitch(NS_LITERAL_STRING("Courier"));
-        SetFixedPitch(NS_LITERAL_STRING("Monaco"));
-    }
-
     // start the delayed cmap loader
     StartLoader(kDelayBeforeLoadingCmaps, kIntervalBetweenLoadingCmaps);
 }
 
 void
-gfxMacPlatformFontList::InitSingleFaceList()
+gfxUIKitPlatformFontList::InitSingleFaceList()
 {
     nsAutoTArray<nsString, 10> singleFaceFonts;
     gfxFontUtils::GetPrefsFontList("font.single-face-list", singleFaceFonts);
@@ -688,17 +463,12 @@
 }
 
 void
-gfxMacPlatformFontList::EliminateDuplicateFaces(const nsAString& aFamilyName)
+gfxUIKitPlatformFontList::EliminateDuplicateFaces(const nsAString& aFamilyName)
 {
-    gfxMacFontFamily *family =
-        static_cast<gfxMacFontFamily*>(FindFamily(aFamilyName));
-
-    if (family)
-        family->EliminateDuplicateFaces();
 }
 
 PRBool
-gfxMacPlatformFontList::GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName)
+gfxUIKitPlatformFontList::GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName)
 {
     gfxFontFamily *family = FindFamily(aFontName);
     if (family) {
@@ -706,276 +476,55 @@
         return PR_TRUE;
     }
 
-    // Gecko 1.8 used Quickdraw font api's which produce a slightly different set of "family"
-    // names.  Try to resolve based on these names, in case this is stored in an old profile
-    // 1.8: "Futura", "Futura Condensed" ==> 1.9: "Futura"
-
-    // convert the name to a Pascal-style Str255 to try as Quickdraw name
-    Str255 qdname;
-    NS_ConvertUTF16toUTF8 utf8name(aFontName);
-    qdname[0] = PR_MAX(255, strlen(utf8name.get()));
-    memcpy(&qdname[1], utf8name.get(), qdname[0]);
-
-    // look up the Quickdraw name
-    ATSFontFamilyRef atsFamily = ::ATSFontFamilyFindFromQuickDrawName(qdname);
-    if (atsFamily == (ATSFontFamilyRef)kInvalidFontFamily) {
-        return PR_FALSE;
-    }
-
-    // if we found a family, get its ATS name
-    CFStringRef cfName;
-    OSStatus status = ::ATSFontFamilyGetName(atsFamily, kATSOptionFlagsDefault, &cfName);
-    if (status != noErr) {
-        return PR_FALSE;
-    }
-
-    // then use this to locate the family entry and retrieve its localized name
-    nsAutoString familyName;
-    GetStringForNSString((const NSString*)cfName, familyName);
-    ::CFRelease(cfName);
-
-    family = FindFamily(familyName);
-    if (family) {
-        family->LocalizedName(aFamilyName);
-        return PR_TRUE;
-    }
-
     return PR_FALSE;
 }
 
-void
-gfxMacPlatformFontList::ATSNotification(ATSFontNotificationInfoRef aInfo,
-                                    void* aUserArg)
-{
-    // xxx - should be carefully pruning the list of fonts, not rebuilding it from scratch
-    gfxMacPlatformFontList *qfc = (gfxMacPlatformFontList*)aUserArg;
-    qfc->UpdateFontList();
-}
-
 gfxFontEntry*
-gfxMacPlatformFontList::GetDefaultFont(const gfxFontStyle* aStyle, PRBool& aNeedsBold)
+gfxUIKitPlatformFontList::GetDefaultFont(const gfxFontStyle* aStyle, PRBool& aNeedsBold)
 {
     nsAutoreleasePool localPool;
 
-    NSString *defaultFamily = [[NSFont userFontOfSize:aStyle->size] familyName];
+    NSString *defaultFamily = [[UIFont systemFontOfSize:aStyle->size] familyName];
     nsAutoString familyName;
 
     GetStringForNSString(defaultFamily, familyName);
     return FindFontForFamily(familyName, aStyle, aNeedsBold);
 }
 
-PRInt32
-gfxMacPlatformFontList::AppleWeightToCSSWeight(PRInt32 aAppleWeight)
-{
-    if (aAppleWeight < 1)
-        aAppleWeight = 1;
-    else if (aAppleWeight > kAppleMaxWeight)
-        aAppleWeight = kAppleMaxWeight;
-    return gAppleWeightToCSSWeight[aAppleWeight];
-}
-
 gfxFontEntry*
-gfxMacPlatformFontList::LookupLocalFont(const gfxProxyFontEntry *aProxyEntry,
-                                        const nsAString& aFontName)
+gfxUIKitPlatformFontList::LookupLocalFont(const gfxProxyFontEntry *aProxyEntry,
+                                          const nsAString& aFontName)
 {
     nsAutoreleasePool localPool;
 
     NSString *faceName = GetNSStringForString(aFontName);
 
-    // first lookup a single face based on postscript name
-    ATSFontRef fontRef = ::ATSFontFindFromPostScriptName(CFStringRef(faceName),
-                                                         kATSOptionFlagsDefault);
-
-    // if not found, lookup using full font name
-    if (fontRef == kInvalidFont)
-        fontRef = ::ATSFontFindFromName(CFStringRef(faceName),
-                                        kATSOptionFlagsDefault);
-
-    // not found
-    if (fontRef == kInvalidFont)
-        return nsnull;
-
-    MacOSFontEntry *newFontEntry;
+    UIKitFontEntry *newFontEntry;
     if (aProxyEntry) {
         PRUint16 w = aProxyEntry->mWeight;
         NS_ASSERTION(w >= 100 && w <= 900, "bogus font weight value!");
 
         newFontEntry =
-            new MacOSFontEntry(aFontName, fontRef,
+            new UIKitFontEntry(aFontName,
                                w, aProxyEntry->mStretch,
                                aProxyEntry->mItalic ?
                                    FONT_STYLE_ITALIC : FONT_STYLE_NORMAL,
                                nsnull);
     } else {
         newFontEntry =
-            new MacOSFontEntry(aFontName, fontRef,
+            new UIKitFontEntry(aFontName,
                                400, 0, FONT_STYLE_NORMAL, nsnull);
     }
 
     return newFontEntry;
 }
 
-// grumble, another non-publised Apple API dependency (found in Webkit code)
-// activated with this value, font will not be found via system lookup routines
-// it can only be used via the created ATSFontRef
-// needed to prevent one doc from finding a font used in a separate doc
-
-enum {
-    kPrivateATSFontContextPrivate = 3
-};
-
-class MacOSUserFontData : public gfxUserFontData {
-public:
-    MacOSUserFontData(ATSFontContainerRef aContainerRef)
-        : mContainerRef(aContainerRef)
-    { }
-
-    virtual ~MacOSUserFontData()
-    {
-        // deactivate font
-        if (mContainerRef)
-            ::ATSFontDeactivate(mContainerRef, NULL, kATSOptionFlagsDefault);
-    }
-
-    ATSFontContainerRef     mContainerRef;
-};
-
 gfxFontEntry*
-gfxMacPlatformFontList::MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
-                                         const PRUint8 *aFontData,
-                                         PRUint32 aLength)
+gfxUIKitPlatformFontList::MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
+                                           const PRUint8 *aFontData,
+                                           PRUint32 aLength)
 {
-    OSStatus err;
-
-    NS_ASSERTION(aFontData, "MakePlatformFont called with null data");
-
-    // MakePlatformFont is responsible for deleting the font data with NS_Free
-    // so we set up a stack object to ensure it is freed even if we take an
-    // early exit
-    struct FontDataDeleter {
-        FontDataDeleter(const PRUint8 *aFontData)
-            : mFontData(aFontData) { }
-        ~FontDataDeleter() { NS_Free((void*)mFontData); }
-        const PRUint8 *mFontData;
-    };
-    FontDataDeleter autoDelete(aFontData);
-
-    ATSFontRef fontRef;
-    ATSFontContainerRef containerRef;
-
-    // we get occasional failures when multiple fonts are activated in quick succession
-    // if the ATS font cache is damaged; to work around this, we can retry the activation
-    const PRUint32 kMaxRetries = 3;
-    PRUint32 retryCount = 0;
-    while (retryCount++ < kMaxRetries) {
-        err = ::ATSFontActivateFromMemory(const_cast<PRUint8*>(aFontData), aLength,
-                                          kPrivateATSFontContextPrivate,
-                                          kATSFontFormatUnspecified,
-                                          NULL,
-                                          kATSOptionFlagsDoNotNotify,
-                                          &containerRef);
-        mATSGeneration = ::ATSGetGeneration();
-
-        if (err != noErr) {
-#if DEBUG
-            char warnBuf[1024];
-            sprintf(warnBuf, "downloaded font error, ATSFontActivateFromMemory err: %d for (%s)",
-                    PRInt32(err),
-                    NS_ConvertUTF16toUTF8(aProxyEntry->mFamily->Name()).get());
-            NS_WARNING(warnBuf);
-#endif
-            return nsnull;
-        }
-
-        // ignoring containers with multiple fonts, use the first face only for now
-        err = ::ATSFontFindFromContainer(containerRef, kATSOptionFlagsDefault, 1,
-                                         &fontRef, NULL);
-        if (err != noErr) {
-#if DEBUG
-            char warnBuf[1024];
-            sprintf(warnBuf, "downloaded font error, ATSFontFindFromContainer err: %d for (%s)",
-                    PRInt32(err),
-                    NS_ConvertUTF16toUTF8(aProxyEntry->mFamily->Name()).get());
-            NS_WARNING(warnBuf);
-#endif
-            ::ATSFontDeactivate(containerRef, NULL, kATSOptionFlagsDefault);
-            return nsnull;
-        }
-
-        // now lookup the Postscript name; this may fail if the font cache is bad
-        OSStatus err;
-        NSString *psname = NULL;
-        err = ::ATSFontGetPostScriptName(fontRef, kATSOptionFlagsDefault, (CFStringRef*) (&psname));
-        if (err == noErr) {
-            [psname release];
-        } else {
-#ifdef DEBUG
-            char warnBuf[1024];
-            sprintf(warnBuf, "ATSFontGetPostScriptName err = %d for (%s), retries = %d", (PRInt32)err,
-                    NS_ConvertUTF16toUTF8(aProxyEntry->mFamily->Name()).get(), retryCount);
-            NS_WARNING(warnBuf);
-#endif
-            ::ATSFontDeactivate(containerRef, NULL, kATSOptionFlagsDefault);
-            // retry the activation a couple of times if this fails
-            // (may be a transient failure due to ATS font cache issues)
-            continue;
-        }
-
-        // font entry will own this
-        MacOSUserFontData *userFontData = new MacOSUserFontData(containerRef);
-
-        if (!userFontData) {
-            ::ATSFontDeactivate(containerRef, NULL, kATSOptionFlagsDefault);
-            return nsnull;
-        }
-
-        PRUint16 w = aProxyEntry->mWeight;
-        NS_ASSERTION(w >= 100 && w <= 900, "bogus font weight value!");
-
-        // create the font entry
-        nsAutoString uniqueName;
-
-        nsresult rv = gfxFontUtils::MakeUniqueUserFontName(uniqueName);
-        if (NS_FAILED(rv)) {
-            delete userFontData;
-            return nsnull;
-        }
-
-        MacOSFontEntry *newFontEntry =
-            new MacOSFontEntry(uniqueName,
-                               fontRef,
-                               w, aProxyEntry->mStretch,
-                               aProxyEntry->mItalic ?
-                                   FONT_STYLE_ITALIC : FONT_STYLE_NORMAL,
-                               userFontData);
-
-        if (!newFontEntry) {
-            delete userFontData;
-            return nsnull;
-        }
-
-        // if succeeded and font cmap is good, return the new font
-        if (newFontEntry->mIsValid && NS_SUCCEEDED(newFontEntry->ReadCMAP()))
-            return newFontEntry;
-
-        // if something is funky about this font, delete immediately
-#if DEBUG
-        char warnBuf[1024];
-        sprintf(warnBuf, "downloaded font not loaded properly, removed face for (%s)",
-                NS_ConvertUTF16toUTF8(aProxyEntry->mFamily->Name()).get());
-        NS_WARNING(warnBuf);
-#endif
-        delete newFontEntry;
-
-        // We don't retry from here; the ATS font cache issue would have caused failure earlier
-        // so if we get here, there's something else bad going on within our font data structures.
-        // Currently, there should be no way to reach here, as fontentry creation cannot fail
-        // except by memory allocation failure.
-        NS_WARNING("invalid font entry for a newly activated font");
-        break;
-    }
-
-    // if we get here, the activation failed (even with possible retries); can't use this font
+    //XXX: are there enough APIs to do this?
     return nsnull;
 }
 
